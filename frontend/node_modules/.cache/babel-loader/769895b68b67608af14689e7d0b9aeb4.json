{"ast":null,"code":"import _slicedToArray from \"/Users/edwardlee/code/react/project-management-tool/project-management-tool/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/edwardlee/code/react/project-management-tool/project-management-tool/frontend/src/components/Project/Project.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Project.scss\";\nimport axios from \"axios\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport ProjectCard from \"../ProjectCard/ProjectCard\";\nexport default function Project() {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        stageOne = _useState4[0],\n        setStageOne = _useState4[1];\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        StageTwo = _useState6[0],\n        setStageTwo = _useState6[1];\n\n  useEffect(() => {\n    axios({\n      url: \"http://localhost:3000/api/projects\"\n    }).then(res => {\n      setData(res.data);\n    }).catch(err => {\n      console.log(err);\n    });\n  }, []);\n\n  const filterProjects = data => {\n    const one = data.filter(element => element.stage === '1');\n    setStageOne(one);\n  };\n\n  const onDragEnd = result => {};\n\n  return React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(Droppable, {\n    droppableId: \"stageOne\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, provided => React.createElement(\"div\", Object.assign({\n    className: \"stageOne-container\"\n  }, provided.droppableProps, {\n    ref: provided.innerRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), data.map((project, index) => React.createElement(ProjectCard, Object.assign({\n    key: project._id\n  }, project, {\n    index: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }))), provided.placeholder))));\n} // import React, { useEffect, useState } from \"react\";\n// import \"./Project.scss\";\n// import initData from \"./testData\";\n// import Column from \"../Column/Column\";\n// import { DragDropContext } from \"react-beautiful-dnd\";\n// export default function Project() {\n//   const [data, setData] = useState(initData);\n//   const onDragEnd = result => {\n//     const { destination, source, draggableId } = result;\n//     if (!destination) {\n//       return;\n//     }\n//     if (\n//       destination.droppableId === source.droppableId &&\n//       destination.index === source.index\n//     ) {\n//       return;\n//     }\n//     const column = data.columns[source.droppableId];\n//     const newTaskIds = Array.from(column.taskIds);\n//     newTaskIds .splice(source.index, 1);\n//     newTaskIds.splice(destination.index, 0 , draggableId);\n//     const newColumn = {\n//       ...column,\n//       taskIds:newTaskIds,\n//     }\n//     const newState ={\n//        ...data,\n//        column:{\n//          ...data.columns,\n//          [newColumn.id]:newColumn,\n//        }\n//     }\n//     setData(newState)\n//   };\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <div className=\"project-main-container\">\n//         {data.columnOrder.map(columnId => {\n//           const column = data.columns[columnId];\n//           const tasks = column.taskIds.map(taskId => data.tasks[taskId]);\n//           return <Column key={column.id} column={column} tasks={tasks} />;\n//         })}\n//       </div>\n//     </DragDropContext>\n//   );\n// }","map":{"version":3,"sources":["/Users/edwardlee/code/react/project-management-tool/project-management-tool/frontend/src/components/Project/Project.js"],"names":["React","useEffect","useState","axios","DragDropContext","Droppable","ProjectCard","Project","data","setData","stageOne","setStageOne","StageTwo","setStageTwo","url","then","res","catch","err","console","log","filterProjects","one","filter","element","stage","onDragEnd","result","provided","droppableProps","innerRef","map","project","index","_id","placeholder"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,gBAAP;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,EAA0BC,SAA1B,QAA2C,qBAA3C;AACA,OAAOC,WAAP,MAAwB,4BAAxB;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA,oBACRL,QAAQ,CAAC,EAAD,CADA;AAAA;AAAA,QACzBM,IADyB;AAAA,QACnBC,OADmB;;AAAA,qBAEDP,QAAQ,CAAC,EAAD,CAFP;AAAA;AAAA,QAEzBQ,QAFyB;AAAA,QAEhBC,WAFgB;;AAAA,qBAGDT,QAAQ,CAAC,EAAD,CAHP;AAAA;AAAA,QAGzBU,QAHyB;AAAA,QAGhBC,WAHgB;;AAKhCZ,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,KAAK,CAAC;AACJW,MAAAA,GAAG,EAAE;AADD,KAAD,CAAL,CAGGC,IAHH,CAGQC,GAAG,IAAI;AACXP,MAAAA,OAAO,CAACO,GAAG,CAACR,IAAL,CAAP;AACD,KALH,EAMGS,KANH,CAMSC,GAAG,IAAI;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KARH;AASD,GAVQ,EAUN,EAVM,CAAT;;AAYA,QAAMG,cAAc,GAAIb,IAAD,IAAS;AAC5B,UAAMc,GAAG,GAAGd,IAAI,CAACe,MAAL,CAAaC,OAAD,IAAYA,OAAO,CAACC,KAAR,KAAkB,GAA1C,CAAZ;AAEAd,IAAAA,WAAW,CAACW,GAAD,CAAX;AACH,GAJD;;AAKA,QAAMI,SAAS,GAAGC,MAAM,IAAI,CAAE,CAA9B;;AAEA,SACE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAED,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD;AAAW,IAAA,WAAW,EAAC,UAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,QAAQ,IACP;AACE,IAAA,SAAS,EAAC;AADZ,KAEMA,QAAQ,CAACC,cAFf;AAGE,IAAA,GAAG,EAAED,QAAQ,CAACE,QAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKGtB,IAAI,CAACuB,GAAL,CAAS,CAACC,OAAD,EAAUC,KAAV,KACR,oBAAC,WAAD;AAAa,IAAA,GAAG,EAAED,OAAO,CAACE;AAA1B,KAAmCF,OAAnC;AAA4C,IAAA,KAAK,EAAEC,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD,CALH,EAQGL,QAAQ,CAACO,WARZ,CAFJ,CADF,CADF,CADF;AAoBD,C,CAED;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./Project.scss\";\nimport axios from \"axios\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport ProjectCard from \"../ProjectCard/ProjectCard\";\n\nexport default function Project() {\n  const [data, setData] = useState([]);\n  const [stageOne,setStageOne] = useState([])\n  const [StageTwo,setStageTwo] = useState([])\n\n  useEffect(() => {\n    axios({\n      url: \"http://localhost:3000/api/projects\"\n    })\n      .then(res => {\n        setData(res.data);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, []);\n\n  const filterProjects = (data) =>{\n      const one = data.filter((element)=>(element.stage === '1'))\n\n      setStageOne(one)\n  }\n  const onDragEnd = result => {};\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div>\n        <Droppable droppableId=\"stageOne\">\n          {provided => (\n            <div\n              className=\"stageOne-container\"\n              {...provided.droppableProps}\n              ref={provided.innerRef}\n            >\n              {data.map((project, index) => (\n                <ProjectCard key={project._id} {...project} index={index} />\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </div>\n    </DragDropContext>\n  );\n}\n\n// import React, { useEffect, useState } from \"react\";\n// import \"./Project.scss\";\n// import initData from \"./testData\";\n// import Column from \"../Column/Column\";\n// import { DragDropContext } from \"react-beautiful-dnd\";\n\n// export default function Project() {\n//   const [data, setData] = useState(initData);\n\n//   const onDragEnd = result => {\n//     const { destination, source, draggableId } = result;\n//     if (!destination) {\n//       return;\n//     }\n\n//     if (\n//       destination.droppableId === source.droppableId &&\n//       destination.index === source.index\n//     ) {\n//       return;\n//     }\n\n//     const column = data.columns[source.droppableId];\n//     const newTaskIds = Array.from(column.taskIds);\n//     newTaskIds .splice(source.index, 1);\n//     newTaskIds.splice(destination.index, 0 , draggableId);\n\n//     const newColumn = {\n//       ...column,\n//       taskIds:newTaskIds,\n\n//     }\n\n//     const newState ={\n//        ...data,\n//        column:{\n//          ...data.columns,\n//          [newColumn.id]:newColumn,\n//        }\n//     }\n\n//     setData(newState)\n\n//   };\n//   return (\n//     <DragDropContext onDragEnd={onDragEnd}>\n//       <div className=\"project-main-container\">\n//         {data.columnOrder.map(columnId => {\n//           const column = data.columns[columnId];\n//           const tasks = column.taskIds.map(taskId => data.tasks[taskId]);\n//           return <Column key={column.id} column={column} tasks={tasks} />;\n//         })}\n//       </div>\n//     </DragDropContext>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}