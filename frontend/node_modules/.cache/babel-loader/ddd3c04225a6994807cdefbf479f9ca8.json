{"ast":null,"code":"import _slicedToArray from \"/Users/edwardlee/code/react/project-management-tool/project-management-tool/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/edwardlee/code/react/project-management-tool/project-management-tool/frontend/src/components/Project/Project.js\";\nimport React, { useEffect, useState } from \"react\";\nimport \"./Project.scss\";\nimport initData from \"./testData\";\nimport Column from \"../Column/Column\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nexport default function Project() {\n  const _useState = useState(initData),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const onDragEnd = result => {\n    const destination = result.destination,\n          source = result.source,\n          draggableId = result.draggableId;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n  };\n\n  return React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"project-main-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, data.columnOrder.map(columnId => {\n    const column = data.columns[columnId];\n    const tasks = column.taskIds.map(taskId => data.tasks[taskId]);\n    return React.createElement(Column, {\n      key: column.id,\n      column: column,\n      tasks: tasks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    });\n  })));\n}","map":{"version":3,"sources":["/Users/edwardlee/code/react/project-management-tool/project-management-tool/frontend/src/components/Project/Project.js"],"names":["React","useEffect","useState","initData","Column","DragDropContext","Project","data","setData","onDragEnd","result","destination","source","draggableId","droppableId","index","columnOrder","map","columnId","column","columns","tasks","taskIds","taskId","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,gBAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA,oBACRJ,QAAQ,CAACC,QAAD,CADA;AAAA;AAAA,QACzBI,IADyB;AAAA,QACnBC,OADmB;;AAGhC,QAAMC,SAAS,GAAGC,MAAM,IAAI;AAAA,UACnBC,WADmB,GACmBD,MADnB,CACnBC,WADmB;AAAA,UACLC,MADK,GACmBF,MADnB,CACLE,MADK;AAAA,UACIC,WADJ,GACmBH,MADnB,CACIG,WADJ;;AAE1B,QAAG,CAACF,WAAJ,EAAgB;AACd;AACD;;AAED,QAAIA,WAAW,CAACG,WAAZ,KAA4BF,MAAM,CAACE,WAAnC,IAAkDH,WAAW,CAACI,KAAZ,KAAsBH,MAAM,CAACG,KAAnF,EAAyF;AACvF;AACD;AACF,GATD;;AAUA,SACE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAEN,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,IAAI,CAACS,WAAL,CAAiBC,GAAjB,CAAqBC,QAAQ,IAAI;AAChC,UAAMC,MAAM,GAAGZ,IAAI,CAACa,OAAL,CAAaF,QAAb,CAAf;AACA,UAAMG,KAAK,GAAGF,MAAM,CAACG,OAAP,CAAeL,GAAf,CAAmBM,MAAM,IAAIhB,IAAI,CAACc,KAAL,CAAWE,MAAX,CAA7B,CAAd;AACA,WAAO,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEJ,MAAM,CAACK,EAApB;AAAwB,MAAA,MAAM,EAAEL,MAAhC;AAAwC,MAAA,KAAK,EAAEE,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAJA,CADH,CADF,CADF;AAWD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./Project.scss\";\nimport initData from \"./testData\";\nimport Column from \"../Column/Column\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nexport default function Project() {\n  const [data, setData] = useState(initData);\n\n  const onDragEnd = result => {\n    const {destination , source , draggableId} = result \n    if(!destination){\n      return;\n    }\n\n    if( destination.droppableId === source.droppableId && destination.index === source.index){\n      return;\n    }\n  };\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div className=\"project-main-container\">\n        {data.columnOrder.map(columnId => {\n          const column = data.columns[columnId];\n          const tasks = column.taskIds.map(taskId => data.tasks[taskId]);\n          return <Column key={column.id} column={column} tasks={tasks} />;\n        })}\n      </div>\n    </DragDropContext>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}