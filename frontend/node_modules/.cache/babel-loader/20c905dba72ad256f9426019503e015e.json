{"ast":null,"code":"import _defineProperty from \"/Users/edwardlee/code/react/project-management-tool/project-management-tool/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/edwardlee/code/react/project-management-tool/project-management-tool/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/edwardlee/code/react/project-management-tool/project-management-tool/frontend/src/components/Project/Project.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./Project.scss\";\nimport initData from \"./testData\";\nimport Column from \"../Column/Column\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nexport default function Project() {\n  const _useState = useState(initData),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const onDragEnd = result => {\n    const destination = result.destination,\n          source = result.source,\n          draggableId = result.draggableId;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return;\n    }\n\n    const column = data.columns[source.droppableId];\n    const newTaskIds = Array.from(column.taskIds);\n    newTaskIds.splice(source.index, 1);\n    newTaskIds.splice(destination.index, 0, draggableId);\n\n    const newColumn = _objectSpread({}, column, {\n      taskIds: newTaskIds\n    });\n\n    const newState = _objectSpread({}, data, {\n      column: _objectSpread({}, data.columns, {\n        [newColumn.id]: newColumn\n      })\n    });\n\n    setData(data);\n  };\n\n  return React.createElement(DragDropContext, {\n    onDragEnd: onDragEnd,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"project-main-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, data.columnOrder.map(columnId => {\n    const column = data.columns[columnId];\n    const tasks = column.taskIds.map(taskId => data.tasks[taskId]);\n    return React.createElement(Column, {\n      key: column.id,\n      column: column,\n      tasks: tasks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    });\n  })));\n}","map":{"version":3,"sources":["/Users/edwardlee/code/react/project-management-tool/project-management-tool/frontend/src/components/Project/Project.js"],"names":["React","useEffect","useState","initData","Column","DragDropContext","Project","data","setData","onDragEnd","result","destination","source","draggableId","droppableId","index","column","columns","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","columnOrder","map","columnId","tasks","taskId"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,gBAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AAEA,eAAe,SAASC,OAAT,GAAmB;AAAA,oBACRJ,QAAQ,CAACC,QAAD,CADA;AAAA;AAAA,QACzBI,IADyB;AAAA,QACnBC,OADmB;;AAGhC,QAAMC,SAAS,GAAGC,MAAM,IAAI;AAAA,UAClBC,WADkB,GACmBD,MADnB,CAClBC,WADkB;AAAA,UACLC,MADK,GACmBF,MADnB,CACLE,MADK;AAAA,UACGC,WADH,GACmBH,MADnB,CACGG,WADH;;AAE1B,QAAI,CAACF,WAAL,EAAkB;AAChB;AACD;;AAED,QACEA,WAAW,CAACG,WAAZ,KAA4BF,MAAM,CAACE,WAAnC,IACAH,WAAW,CAACI,KAAZ,KAAsBH,MAAM,CAACG,KAF/B,EAGE;AACA;AACD;;AAED,UAAMC,MAAM,GAAGT,IAAI,CAACU,OAAL,CAAaL,MAAM,CAACE,WAApB,CAAf;AACA,UAAMI,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWJ,MAAM,CAACK,OAAlB,CAAnB;AACAH,IAAAA,UAAU,CAAEI,MAAZ,CAAmBV,MAAM,CAACG,KAA1B,EAAiC,CAAjC;AACAG,IAAAA,UAAU,CAACI,MAAX,CAAkBX,WAAW,CAACI,KAA9B,EAAqC,CAArC,EAAyCF,WAAzC;;AAEA,UAAMU,SAAS,qBACVP,MADU;AAEbK,MAAAA,OAAO,EAACH;AAFK,MAAf;;AAMA,UAAMM,QAAQ,qBACRjB,IADQ;AAEXS,MAAAA,MAAM,oBACDT,IAAI,CAACU,OADJ;AAEJ,SAACM,SAAS,CAACE,EAAX,GAAeF;AAFX;AAFK,MAAd;;AAQAf,IAAAA,OAAO,CAACD,IAAD,CAAP;AAED,GAlCD;;AAmCA,SACE,oBAAC,eAAD;AAAiB,IAAA,SAAS,EAAEE,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,IAAI,CAACmB,WAAL,CAAiBC,GAAjB,CAAqBC,QAAQ,IAAI;AAChC,UAAMZ,MAAM,GAAGT,IAAI,CAACU,OAAL,CAAaW,QAAb,CAAf;AACA,UAAMC,KAAK,GAAGb,MAAM,CAACK,OAAP,CAAeM,GAAf,CAAmBG,MAAM,IAAIvB,IAAI,CAACsB,KAAL,CAAWC,MAAX,CAA7B,CAAd;AACA,WAAO,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEd,MAAM,CAACS,EAApB;AAAwB,MAAA,MAAM,EAAET,MAAhC;AAAwC,MAAA,KAAK,EAAEa,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAJA,CADH,CADF,CADF;AAWD","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./Project.scss\";\nimport initData from \"./testData\";\nimport Column from \"../Column/Column\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n\nexport default function Project() {\n  const [data, setData] = useState(initData);\n\n  const onDragEnd = result => {\n    const { destination, source, draggableId } = result;\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const column = data.columns[source.droppableId];\n    const newTaskIds = Array.from(column.taskIds);\n    newTaskIds .splice(source.index, 1);\n    newTaskIds.splice(destination.index, 0 , draggableId);\n\n    const newColumn = {\n      ...column,\n      taskIds:newTaskIds,\n\n    }\n\n    const newState ={\n       ...data,\n       column:{\n         ...data.columns,\n         [newColumn.id]:newColumn,\n       }\n    }\n\n    setData(data)\n\n  };\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <div className=\"project-main-container\">\n        {data.columnOrder.map(columnId => {\n          const column = data.columns[columnId];\n          const tasks = column.taskIds.map(taskId => data.tasks[taskId]);\n          return <Column key={column.id} column={column} tasks={tasks} />;\n        })}\n      </div>\n    </DragDropContext>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}